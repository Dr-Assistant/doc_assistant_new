name: Deploy to Development

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  deploy-backend:
    name: Deploy Backend Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - backend/auth_service
          - backend/user_service
          - backend/patient_service
          - backend/schedule_service
          - backend/api_gateway

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
          npm ci

      - name: Build
        run: |
          cd ${{ matrix.service }}
          npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract service name
        id: extract_service
        run: echo "SERVICE_NAME=$(echo ${{ matrix.service }} | awk -F/ '{print $NF}')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: drassistant/${{ steps.extract_service.outputs.SERVICE_NAME }}:dev-${{ github.sha }}

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: frontend/web/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend/web
          npm ci

      - name: Build
        run: |
          cd frontend/web
          npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/web
          file: ./frontend/web/Dockerfile
          push: true
          tags: drassistant/frontend-web:dev-${{ github.sha }}

  deploy-to-dev:
    name: Deploy to Development Environment
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.DEV_KNOWN_HOSTS }}
          
      - name: Deploy to development server
        run: |
          echo "Deploying to development server..."
          ssh ${{ secrets.DEV_SSH_USER }}@${{ secrets.DEV_SSH_HOST }} << 'EOF'
            cd /opt/dr-assistant
            
            # Pull the latest docker-compose file
            git pull
            
            # Update the image tags in docker-compose.yml
            sed -i "s|drassistant/auth_service:.*|drassistant/auth_service:dev-${{ github.sha }}|g" docker-compose.yml
            sed -i "s|drassistant/user_service:.*|drassistant/user_service:dev-${{ github.sha }}|g" docker-compose.yml
            sed -i "s|drassistant/patient_service:.*|drassistant/patient_service:dev-${{ github.sha }}|g" docker-compose.yml
            sed -i "s|drassistant/schedule_service:.*|drassistant/schedule_service:dev-${{ github.sha }}|g" docker-compose.yml
            sed -i "s|drassistant/api_gateway:.*|drassistant/api_gateway:dev-${{ github.sha }}|g" docker-compose.yml
            sed -i "s|drassistant/frontend-web:.*|drassistant/frontend-web:dev-${{ github.sha }}|g" docker-compose.yml
            
            # Pull the latest images
            docker-compose pull
            
            # Restart the services
            docker-compose up -d
          EOF
          
      - name: Notify deployment status
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_TITLE: Development Deployment
          SLACK_MESSAGE: 'Successfully deployed to development environment :rocket:'
          SLACK_COLOR: good
