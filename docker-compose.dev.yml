version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:14
    container_name: dr_assistant_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: dr_assistant
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dr_assistant_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:5
    container_name: dr_assistant_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    ports:
      - "27018:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - dr_assistant_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/dr_assistant --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6
    container_name: dr_assistant_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dr_assistant_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Core Services
  auth_service:
    build:
      context: ./backend/auth_service
      dockerfile: Dockerfile.dev
    container_name: dr_assistant_auth_service
    ports:
      - "8001:8001"
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: dr_assistant
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./backend/auth_service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dr_assistant_network

  user_service:
    build:
      context: ./backend/user_service
      dockerfile: Dockerfile.dev
    container_name: dr_assistant_user_service
    ports:
      - "8002:8002"
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: dr_assistant
      AUTH_SERVICE_URL: http://auth_service:8001
    volumes:
      - ./backend/user_service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      auth_service:
        condition: service_started
    networks:
      - dr_assistant_network

  patient_service:
    build:
      context: ./backend/patient_service
      dockerfile: Dockerfile.dev
    container_name: dr_assistant_patient_service
    ports:
      - "8003:8003"
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: dr_assistant
      MONGODB_URI: mongodb://mongo:mongo@mongodb:27017/dr_assistant
      AUTH_SERVICE_URL: http://auth_service:8001
      USER_SERVICE_URL: http://user_service:8002
    volumes:
      - ./backend/patient_service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      auth_service:
        condition: service_started
      user_service:
        condition: service_started
    networks:
      - dr_assistant_network

  schedule_service:
    build:
      context: ./backend/schedule_service
      dockerfile: Dockerfile.dev
    container_name: dr_assistant_schedule_service
    ports:
      - "8004:8004"
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: dr_assistant
      REDIS_HOST: redis
      REDIS_PORT: 6379
      AUTH_SERVICE_URL: http://auth_service:8001
      USER_SERVICE_URL: http://user_service:8002
      PATIENT_SERVICE_URL: http://patient_service:8003
    volumes:
      - ./backend/schedule_service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth_service:
        condition: service_started
      user_service:
        condition: service_started
      patient_service:
        condition: service_started
    networks:
      - dr_assistant_network

  dashboard_service:
    build:
      context: ./backend/dashboard_service
      dockerfile: Dockerfile.dev
    container_name: dr_assistant_dashboard_service
    ports:
      - "8005:8005"
    environment:
      NODE_ENV: development
      REDIS_HOST: redis
      REDIS_PORT: 6379
      AUTH_SERVICE_URL: http://auth_service:8001
      USER_SERVICE_URL: http://user_service:8002
      PATIENT_SERVICE_URL: http://patient_service:8003
      SCHEDULE_SERVICE_URL: http://schedule_service:8004
    volumes:
      - ./backend/dashboard_service:/app
      - /app/node_modules
    depends_on:
      redis:
        condition: service_healthy
      auth_service:
        condition: service_started
      user_service:
        condition: service_started
      patient_service:
        condition: service_started
      schedule_service:
        condition: service_started
    networks:
      - dr_assistant_network

  task_service:
    build:
      context: ./backend/task_service
      dockerfile: Dockerfile.dev
    container_name: dr_assistant_task_service
    ports:
      - "8016:8016"
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: dr_assistant
      AUTH_SERVICE_URL: http://auth_service:8001
      USER_SERVICE_URL: http://user_service:8002
    volumes:
      - ./backend/task_service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      auth_service:
        condition: service_started
      user_service:
        condition: service_started
    networks:
      - dr_assistant_network

  # Frontend
  frontend_web:
    build:
      context: ./frontend/web
      dockerfile: Dockerfile.dev
    container_name: dr_assistant_frontend_web
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_AUTH_SERVICE_URL: http://localhost:8001
    volumes:
      - ./frontend/web:/app
      - /app/node_modules
    depends_on:
      auth_service:
        condition: service_started
    networks:
      - dr_assistant_network

networks:
  dr_assistant_network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
